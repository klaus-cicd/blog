[{"title":"Hexo入门","url":"/post/d4f72765.html","content":"# Hexo\n\n- 官网\n  https://hexo.io/zh-cn/docs/index.html\n- 文章时间\n  2024/03/26\n\n## Hexo安装\n\n1. Git\n   1. [Git (git-scm.com)](https://git-scm.com/)\n2. NodeJS\n   [[安装Node]]\n\n### 初始化\n\n1. hexo安装（-g为golbal缩写，表示全局安装）\n\n   ```bash\n   npm install hexo-cli -g\n   ```\n\n2. 在本地指定目录下创建文件夹，比如叫“hexo-blog”\n   在“hexo-blog”下打开命令行，执行\n\n   ```bash\n   # 初始化文件夹\n   hexo init\n   ```\n\n3. 安装 hexo 依赖包\n\n   ```bash\n   npm i\n   ```\n\n### 启动\n\n```bash\n# 生成静态网站\nhexo g\n# 启动服务器\nhexo s\n\n# 也可以写成一行\nhexo g && hexo s\n# 建议重新构建前做一下clean\nhexo clean && hexo g && hexo s\n```\n\n- 执行成功后默认地址为：http://localhost:4000\n- 对于主题的修改，支持热更新，在启动状态下刷新页面即可生效\n- 对于hexo的配置修改，需要停止后重新启动才可生效\n\n## 新增文章\n\n> 默认有一篇`helloworld`文章，至少要有一篇文章才能进入首页\n\n在hexo目录下执行`hexo new post xxx`，`xxx`替换为你想要的文章名称，文章创建后会自动在`hexo/source/_post`目录下创建一个`xxx.md`文件\n\n## 配置\n\n### 语言修改\n\n- 改为英文\n  默认就是英文 `en`\n- 改为简体中文\n  在Hexo根目录下找到`_config.yml`文件，修改该文件的`language`标签， 改为：`language: zh-CN`\n\n### 开启文章图片共存\n开启后每次使用`hexo n post xxx`新增文章时，会在文章同级目录下创建一个同名文件夹，该文章内的图片即可放入该文件夹内\n```yml\npost_asset_folder: true\n```\n\n\n\n## 主题\n\n### 主题选择\n\nHexo拥有很多主题，都在[Themes | Hexo](https://hexo.io/themes/)可以找到\n其中使用最多的为NexT主题，主打一个简约，主题地址：https://github.com/next-theme/hexo-theme-next\n\n### 主题配置\n\n1. 下载/安装\n\n- 方式一\n\n在Hexo的`themes`目录下执行：`git clone https://github.com/next-theme/hexo-theme-next themes/next`\n通过该方式下载的主题存放于`hexo/themes`内\n\n- 方式二\n\n  对于Hexo 5.0以上的版本，可以直接在Hexo根目录下安装主题：`npm install hexo-theme-next`\n  通过该方式安装的主题，存放于`hexo/node_modules`目录下，修改主题配置时要注意\n\n2. 主题更换\n\n打开在博客根目录下的`_config.yml` 文件，找到theme配置，将值改为next（即在themes目录下主题文件夹的名称）\n\n3. 主题升级\n\n如果是通过npm install的主题\n\n```bash\n# 进入Hexo根目录\ncd hexo\n# 安装最新的主题Î\nnpm install hexo-theme-next@latest\n```\n\n如果是通过Git clone的主题，则拉取最新主题代码即可\n\n```bash\ncd themes/next\ngit pull\n```\n\n## Next主题美化\n\n这里以next主题为例，以下配置都是基于主题目录（根据安装方式的不同确定）下的`_config.yml`操作\n\n### 选择 Scheme\n\n> Muse、Mist是上下布局，Pisces和Gemini是左右布局，个人喜欢左右布局，所以选择了Gemini\n\n```bash\n# Schemes\nscheme: Muse\n# scheme: Mist\n# scheme: Pisces\n# scheme: Gemini\n```\n\n### 侧边栏进度条显示\n\n![image.png](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_092659_678.png)\n\n1. 主题配置下搜索关键字 `scrollpercent` ,把 `false` 改为 `true`，默认是在右下角展示\n2. 如果想把 top 按钮放在侧边栏，搜索关键字`sidebar` ,把 false 改为 true（个人觉得不好看）\n\n### （不建议）隐藏网页底部`powered By Hexo / 强力驱动`\n\n1. 打开主题目录下`layout/_partials/footer.swig`文件（根据主题版本不同文件后缀不同，我当前最新版本是`footer.njk`）\n2. 将如下代码进行注释或删除\n\n   ```html\n   <!--\n   {%- if theme.footer.powered %}\n     <div class=\"powered-by\">\n       {%- set next_site = 'https://theme-next.org' %}\n       {%- if theme.scheme !== 'Gemini' %}\n         {%- set next_site = 'https://' + theme.scheme | lower + '.theme-next.org' %}\n       {%- endif %}\n       {{- __('footer.powered', next_url('https://hexo.io', 'Hexo', {class: 'theme-link'}) + ' & ' + next_url(next_site, 'NexT.' + theme.scheme, {class: 'theme-link'})) }}\n     </div>\n   {%- endif %}\n   -->\n   ```\n\n### （重要）菜单设置\n\n在主题配置文件内找到关键字`Menu Settings`\n默认内容如下\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  #home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  #tags: /tags/ || fa fa-tags\n  #categories: /categories/ || fa fa-th\n  #archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n1. 需要的菜单打开注释\n2. 可以看到文章目录下，默认只有`_post`目录，所以即使我们打开了`about`、`tags`等菜单注释，点击后也无法跳转，所以需要新增对应的文章作为目录页面进行跳转\n\n![image.png](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_105418_533.png)\n举例新增标签菜单页\n\n3. 在hexo目录下执行`hexo new page tags`，会自动在文章目录下创建tags目录以及`index.md`\n\n![image.png](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_110417_513.png)\n\n4. 编辑`tags`目录下的`index.md`，按照如下格式新增`type`标签\n\n```bash\ntitle: tags\ntype: \"tags\"\ndate: 2024-03-26 11:03:03\n```\n\n3. 同样的方式创建分类、关于等页面（归档页面已经默认有了，虽然在source目录下没有）\n\n### 安装全局搜索插件\n\n1. 在hexo根目录下安装搜索插件，用于生成博客索引数据，下载时间可能会比较慢\n\n```bash\nnpm install hexo-generator-search\n```\n\n2. 修改博客配置文件（hexo/\\_config.yml），添加以下代码\n\n```yml\nsearch:\n  path: search.json #之前就是这里出了问题导致图标错误，错误的教程是 search.xml\n  field: post\n  format: html\n  limit: 1000\n```\n\n3. 修改主题的根目录配置文件，搜索关键字`local_search`，把`enable`的false改为true\n\n```yml\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n4. 重新生成页面&启动：`hexo clean && hexo g && hexo s`\n5. 在菜单栏会新增菜单`Search`\n\n![image.png](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_123829_864.png)\n\n### 阅读时间插件安装\n\n1. 在hexo根目录下执行：`npm install hexo-symbols-count-time`\n\n2. 在hexo配置文件`_config.yml`下新增如下配置\n\n```yml\n# 阅读时间插件\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 3\n  wpm: 200\n  suffix: \"mins.\"\n```\n\n3. 确认NexT配置\n   > 默认就是这个插件，无需添加，只需确认即可\n\n```bash\n# Dependencies: https://github.com/next-theme/hexo-word-counter\nsymbols_count_time:\n  separated_meta: true\n  item_text_total: false\n```\n\n4. 重新生成&启动，效果图如下（页脚）\n\n![image.png##w800](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_124908_680.png)\n\n### 删除侧边栏上的作者名\n\n1. 找到文件：`site-overview.swig`或`site-overview.njk`文件\n2. 搜索关键字`site-author-name`，注释或删除该P标签\n\n```html\n  <!--\n  <p class=\"site-author-name\" itemprop=\"name\">{{ author }}</p>\n  -->\n```\n\n3. 效果比对\n\n![image.png##w400](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_131951_580.png)\n![image.png##w355](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_132001_815.png)\n\n### 自定义404页面（本人测试失败）\n\n> 当访问不存在的URI时，会抛出接口的404信息，非常难看，所以我们可以自定义一个美观的404页面\n\n![image.png##w400](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_135957_579.png)\n\n1. 在hexo根目录下执行新增页面指令`hexo n page 404`\n2. 编辑`source/404/index.md`文件，修改文件头部信息，新增404页面html代码（这里只是提供一个页面案例，可以根据自己审美自行替换，网上有非常多现成的模板）\n\n   ```markdown\n   ---\n   layout: false\n   comments: false\n   title: 404\n   permalink: /404\n   ---\n\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   \t<head>\n   \t\t<meta charset=\"UTF-8\">\n   \t\t<title>404</title>\n   \t</head>\n   \t<body>\n   \t\t<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n   \t</body>\n   </html>\n   ```\n\n注意不要忘了修改permalink，不然不会在根目录下生成404.html\n\n### 生成文章唯一链接\n\n> Hexo在生成拨款了文章链接时，默认是按照年月日标题格式生成，所以如果链接被分享后对文章标题进行修改，使用旧的链接就无法正常访问到文章了\n>\n> 可以利用`hexo-abbrlink`插件来生成文章唯一链接从而解决这个问题（原理：生成后原文章md文件的Front-matter内会增加abbrlink字段，这个id就会作为文章的专属链接Î）\n\n1. 在hexo根目录下执行插件安装指令：`npm install hexo-abbrlink --save`\n2. 修改配置文件\n\n```yml\npermalink: post/:abbrlink.html\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\n```\n\n3.\n\n### 开启文章自动摘录\n\n> 在最新的版本下未找到\n\n1. 打开主题下的`_config.yml` 文件\n2. 找到`auto_excerpt`属性\n3. 将`enable` 改为true\n\n### 博客背景修改\n\n1. 打开主题下的`_config.yml` 文件\n2. 选择需要的动态背景类型\n3. 如`canvas_nest` ，将值改为true（我在最新的版本没有没找到这个效果，只有`canvas_ribbon`，开启后效果如下）\n\n   ![image.png##w700](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20240326_144119_568.png)\n\nPS：只能生效一种，所以如果需要修改类型，需要将原来开启的类型改为false\n\n### 开启gitment\n\n1. 在Github创建一个公开的仓库用来存储评论内容\n2. 生成Github的授权ID和秘钥\n3. 打开主题目录下的`_config.yml` 文件\n4. 找到`gitment` 片段\n5. 将enable改为true\n6. 修改对应的Github信息\n\n## 部署\n\n### Gitee Pages\n\n#### Git账号准备\n\nhttps://gitee.com/\n\n#### 仓库准备\n\n创建一个公开的git仓库（一定要为公开的）\n\n#### 申请Gitee Pages服务\n\n1. 创建仓库后，在服务Tab内找到`Gitee Pages` （服务Tab下的第一个菜单）\n\n![image.png](https://blossom.wynnspace.cn/bl/pic/home/bl/img/U1/blog/hexo/image_20231126_220541_460.png)\n\n2. 首次申请时需要进行实名认证，自行提交认证所需材料，一般1至2个工作日申请OK\n\n3. 在本地Hexo根目录配置文件`_config.yml`最下方找到`deploy`相关内容，填入你的Git仓库地址信息\n\n   > 自行替换`your-git-name`和`your-repo-name`部分（在Git仓库，代码Tab下，点击`克隆/下载`按钮可快速复制你的Git仓库地址）\n   >\n   > `branch`可不填，默认为master\n\n   ```yml\n   deploy:\n     type: 'git'\n     repo: https://gitee.com/your-git-name/your-repo-name.git\n     branch: main\n   ```\n\n4. 在本地Hexo根目录下打开命令行，执行以下内容\n\n   ```bash\n   # 清除历史编译\n   hexo clean\n   # 编译打包\n   hexo g\n   # 将代码部署到仓库, 首次部署需要输入git用户名&密码\n   hexo d\n   ```\n\n   打开Git仓库查看本地的Hexo相关内容是否已经推送至Git仓库\n\n5. 实名认证通过后，在前面创建的仓库内继续点击Gitee Pages服务，进入Gitee Pages服务页面\n\n   部署分支：选择你的Hexo所在的分支\n   部署目录：不填即可\n   勾选强制使用HTTPS\n   点击部署\n\n6. 访问博客\n\n   > 自行替换`your-git-name`和`your-git-repo`部分内容\n\n   https://your-git-name.gitee.io/your-git-repo/\n\n### Github page\n\n这里介绍一键部署方式，可以避免将源码公示\n\n> 参考：\n>\n> https://hexo.io/zh-cn/docs/github-pages\n>\n> https://github.com/hexojs/hexo-deployer-git\n\n1. 安装插件：`npm install hexo-deployer-git --save`\n2. 建立一个Github仓库，对于免费版的Github Page，\n   1. 要求仓库必须是公开的，付费后将仓库改为私有\n   2. 仓库名称如果不是`<username>.github.io`，需要在仓库Pages设置内自定义别名，但是一定要以`.github.io`结尾\n   3. 由于部署时只会将生成的html文件推至配置的分支，所以建议使用两个分支，一个用来管理源码，一个用于部署\n4. 修改Hexo配置\n   \n```yml\ndeploy:\n  type: 'git'\n  repo: https://github.com/<username>/<project>\n  branch: page\n```\n或\n\n```yml\ndeploy:\n  repo:\n    github: git@github.com:<username>/<project>.git,<branch>\n    gitee:\n      url: https://gitee.com/<username>/<project>.git\n      branch: <branch>\n```\n3. 将Hexo推送至上面配置的github仓库内\n   > 这里使用main作为主分支，执行`git init`后默认是使用`master`作为主分支，如果需要改成main，可以再执行`git branch -m main` 对分支进行重命名\n    ```bash\n    # git仓库初始化\n    git init\n    # 将所有内容添加到暂存区\n    git add .\n    # 将暂存区内容进行提交\n    git commit -m 'Hexo init'\n    # 配置推送目标\n    git remote add <名称> <地址>\n    # 为本地当前分支配置上游分支\n    git push --set-upstream origin main\n    # 执行推送\n    git push\n    ```\n4. 部署：`hexo clean && hexo deploy`\n5. 提示部署成功后访问 <GitHub用户名>.github.io，检查是否ok\n\n"}]